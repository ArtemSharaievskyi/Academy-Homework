// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ —è—á–µ–π–∫–∏
const difficulties = {
  beginner: { width: 9, height: 9, minesCount: 10, cellSize: 40 },
  intermediate: { width: 16, height: 16, minesCount: 40, cellSize: 30 },
  professional: { width: 28, height: 28, minesCount: 99, cellSize: 16 }
};

// –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –Ω–æ–≤–∏—á–æ–∫)
let currentDifficulty = difficulties.beginner;

const boardElement = document.querySelector('.minesweeper');
const timerElement = document.querySelector('.timer');
const mineCounterElement = document.querySelector('.mine-counter');
const restartButton = document.getElementById('restart');

// –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
const beginnerBtn = document.getElementById('beginner');
const intermediateBtn = document.getElementById('intermediate');
const professionalBtn = document.getElementById('professional');

// –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"
const rulesBtn = document.getElementById('rules-btn');
const rulesModal = document.getElementById('rules-modal');
const closeModalBtn = document.querySelector('.modal .close');

let cells = [];      // –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤-—è—á–µ–π–∫–∏
let gameOver = false;
let timerInterval;
let timeElapsed = 0;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
beginnerBtn.addEventListener('click', () => {
  currentDifficulty = difficulties.beginner;
  setActiveDifficultyButton(beginnerBtn);
  restartGame();
});
intermediateBtn.addEventListener('click', () => {
  currentDifficulty = difficulties.intermediate;
  setActiveDifficultyButton(intermediateBtn);
  restartGame();
});
professionalBtn.addEventListener('click', () => {
  currentDifficulty = difficulties.professional;
  setActiveDifficultyButton(professionalBtn);
  restartGame();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è –∏–≥—Ä–∞"
restartButton.addEventListener('click', restartGame);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"
rulesBtn.addEventListener('click', () => {
  rulesModal.style.display = 'block';
});
closeModalBtn.addEventListener('click', () => {
  rulesModal.style.display = 'none';
});
window.addEventListener('click', (event) => {
  if (event.target === rulesModal) {
    rulesModal.style.display = 'none';
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function setActiveDifficultyButton(activeButton) {
  const buttons = document.querySelectorAll('.difficulty-controls button');
  buttons.forEach(btn => btn.classList.remove('active'));
  activeButton.classList.add('active');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function init() {
  startTimer();

  // –ó–∞–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  boardElement.style.gridTemplateColumns = `repeat(${currentDifficulty.width}, ${currentDifficulty.cellSize}px)`;
  boardElement.style.gridTemplateRows = `repeat(${currentDifficulty.height}, ${currentDifficulty.cellSize}px)`;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —è—á–µ–π–∫–∏
  for (let i = 0; i < currentDifficulty.width * currentDifficulty.height; i++) {
    const cellElement = document.createElement('div');
    cellElement.classList.add('cell');
    cellElement.dataset.index = i;
    // –ó–∞–¥–∞—ë–º —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–π–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é
    cellElement.style.width = currentDifficulty.cellSize + "px";
    cellElement.style.height = currentDifficulty.cellSize + "px";
    boardElement.appendChild(cellElement);

    // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —è—á–µ–π–∫–∏ –¥–ª—è –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã
    const cell = {
      element: cellElement,
      isMine: false,
      adjacentMines: 0,
      isRevealed: false,
      isFlagged: false,
    };

    cells.push(cell);

    // –õ–µ–≤—ã–π –∫–ª–∏–∫ ‚Äì —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —è—á–µ–π–∫–∏
    cellElement.addEventListener('click', () => {
      if (!gameOver) {
        revealCell(i);
      }
    });

    // –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ —Ñ–ª–∞–≥–∞
    cellElement.addEventListener('contextmenu', (e) => {
      e.preventDefault();
      if (!gameOver) {
        toggleFlag(i);
      }
    });
  }

  // –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω—ã –∏ –≤—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ —è—á–µ–µ–∫
  placeMines();
  calculateAdjacentMines();
  updateMineCounter();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω
function placeMines() {
  let minesPlaced = 0;
  while (minesPlaced < currentDifficulty.minesCount) {
    const randomIndex = Math.floor(Math.random() * cells.length);
    if (!cells[randomIndex].isMine) {
      cells[randomIndex].isMine = true;
      minesPlaced++;
    }
  }
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
function calculateAdjacentMines() {
  for (let i = 0; i < cells.length; i++) {
    if (cells[i].isMine) continue;
    const adjacent = getAdjacentIndices(i);
    let count = 0;
    for (let index of adjacent) {
      if (cells[index] && cells[index].isMine) {
        count++;
      }
    }
    cells[i].adjacentMines = count;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫
function getAdjacentIndices(index) {
  const indices = [];
  const x = index % currentDifficulty.width;
  const y = Math.floor(index / currentDifficulty.width);

  for (let dx = -1; dx <= 1; dx++) {
    for (let dy = -1; dy <= 1; dy++) {
      if (dx === 0 && dy === 0) continue;
      const newX = x + dx;
      const newY = y + dy;
      if (newX >= 0 && newX < currentDifficulty.width && newY >= 0 && newY < currentDifficulty.height) {
        indices.push(newY * currentDifficulty.width + newX);
      }
    }
  }
  return indices;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —è—á–µ–π–∫–∏
function revealCell(index) {
  const cell = cells[index];
  if (cell.isRevealed || cell.isFlagged) return;

  cell.isRevealed = true;
  cell.element.classList.add('revealed');

  if (cell.isMine) {
    cell.element.textContent = 'üí£';
    gameOver = true;
    revealAllMines();
    stopTimer();
    setTimeout(() => {
      alert("Game Over!");
    }, 100);
    return;
  }

  if (cell.adjacentMines > 0) {
    cell.element.textContent = cell.adjacentMines;
    cell.element.setAttribute('data-number', cell.adjacentMines);
  } else {
    // –ï—Å–ª–∏ –≤–æ–∫—Ä—É–≥ –Ω–µ—Ç –º–∏–Ω ‚Äì —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫
    const adjacent = getAdjacentIndices(index);
    for (let i of adjacent) {
      if (!cells[i].isRevealed) {
        revealCell(i);
      }
    }
  }

  checkWin();
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏/—Å–Ω—è—Ç–∏—è —Ñ–ª–∞–≥–∞
function toggleFlag(index) {
  const cell = cells[index];
  if (cell.isRevealed) return;

  cell.isFlagged = !cell.isFlagged;
  if (cell.isFlagged) {
    cell.element.textContent = 'üö©';
    cell.element.classList.add('flagged');
  } else {
    cell.element.textContent = '';
    cell.element.classList.remove('flagged');
  }
  updateMineCounter();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–∏–Ω
function updateMineCounter() {
  const flagsUsed = cells.filter(cell => cell.isFlagged).length;
  const minesLeft = currentDifficulty.minesCount - flagsUsed;
  mineCounterElement.textContent = "–ú–∏–Ω—ã: " + minesLeft;
}

// –†–∞—Å–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–∏–Ω –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
function revealAllMines() {
  cells.forEach(cell => {
    if (cell.isMine) {
      cell.element.classList.add('revealed');
      cell.element.textContent = 'üí£';
    }
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è (—Ä–∞—Å–∫—Ä—ã—Ç—ã –≤—Å–µ –Ω–µ-–º–∏–Ω–Ω—ã–µ —è—á–µ–π–∫–∏)
function checkWin() {
  const revealedCount = cells.filter(cell => cell.isRevealed).length;
  if (revealedCount === cells.length - currentDifficulty.minesCount) {
    gameOver = true;
    stopTimer();
    setTimeout(() => {
      alert("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!");
    }, 100);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
function startTimer() {
  timerElement.textContent = "Time: 0";
  timeElapsed = 0;
  timerInterval = setInterval(() => {
    timeElapsed++;
    timerElement.textContent = "Time: " + timeElapsed;
  }, 1000);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
function stopTimer() {
  clearInterval(timerInterval);
}

// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
function restartGame() {
  stopTimer();
  cells = [];
  gameOver = false;
  boardElement.innerHTML = '';
  timerElement.textContent = "Time: 0";
  mineCounterElement.textContent = "–ú–∏–Ω—ã: " + currentDifficulty.minesCount;
  init();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = init;
